
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

#********************************************************** Direct for main branch **************************************************************************
# name: 'Terraform-Plan'

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:

# permissions:
#   contents: read
#***********************************************************************************************************************************************************

#********************************************************** Direct for feature branch ***********************************************
name: 'Terraform Plan'

on:
  push:
    branches:
      - '**'          # Triggers on all branches except main
    paths-ignore:
      - .github/**    # Ignore changes in the .github folder
      - main          # Ignore pushes directly to main

permissions:
  contents: read
  pull-requests: write   # Permission to comment on the PR

jobs:
  terraform:
    name: 'Terraform-Plan'
    runs-on: self-hosted
    environment: preproduction

    defaults:
      run:
        shell: bash
  
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.5.0  # Optional: specify Terraform version

    # Initialize Terraform with AWS credentials passed
    - name: Terraform Init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Format Terraform configuration
    - name: Terraform Format
      run: terraform fmt -check
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # Generate Terraform plan and save it to a binary file (required for apply)
    - name: Terraform Plan
      run: |
        terraform plan -input=false -out=tfplan  # Generate and save the plan to tfplan binary file
        # terraform show -no-color tfplan > plan.txt  # Save human-readable plan to plan.txt
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

